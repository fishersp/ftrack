import logging
import os
import sys
from datetime import datetime

import pandas as pd
import requests
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import configparser
from pytz import timezone as pytz_timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s ‚Üí %(message)s",
    handlers=[
        logging.FileHandler("tracker.log", encoding="utf-8"),
        logging.StreamHandler(sys.stdout)
    ],
)
log = logging.getLogger("fin_tracker")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = configparser.ConfigParser()
config.read("config.ini", encoding="utf-8")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
ALLOWED_USERS = [int(x) for x in config["bot"].get("ALLOWED_USERS", "").split(",") if x.strip()]
N8N_GET_URL = config["n8n"].get("N8N_GET_URL", "")
N8N_WEBHOOK_URL = config["n8n"].get("N8N_WEBHOOK_URL", "")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def is_auth(user_id: int) -> bool:
    return user_id in ALLOWED_USERS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç!\n–û—Ç–ø—Ä–∞–≤—å —Ä–∞—Å—Ö–æ–¥: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    text = update.message.text.strip()
    parts = [p.strip() for p in text.split(",")]
    if len(parts) < 2:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

    category, amount, *comment = parts
    try:
        amount = float(amount.replace("‚ÇΩ", "").replace(" ", ""))
    except ValueError:
        return await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    comment = comment[0] if comment else ""
    date_str = datetime.now().strftime("%Y-%m-%d")

    await update.message.reply_text(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {category}, {amount:.0f}‚ÇΩ{', ' + comment if comment else ''}...")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n
    payload = {
        "–¥–∞—Ç–∞": date_str,
        "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": category,
        "—Å—É–º–º–∞": f"{amount:.0f}",
        "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment
    }

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ webhook
        log.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ: {payload}")
        response = requests.post(N8N_WEBHOOK_URL, json=payload)
        if response.status_code == 200:
            await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {category}, {amount:.0f}‚ÇΩ{', ' + comment if comment else ''}")
        else:
            log.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code} - {response.text[:200]}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ n8n: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
async def test_connection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º GET-–∑–∞–ø—Ä–æ—Å
        resp = requests.get(N8N_GET_URL, timeout=10)
        get_status = f"‚úÖ GET: {resp.status_code}, Size: {len(resp.content)} bytes"
    except Exception as e:
        get_status = f"‚ùå GET: –û—à–∏–±–∫–∞ - {str(e)}"

    await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n{get_status}")

def main():
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    app = ApplicationBuilder().token(config["bot"]["TOKEN"]).build()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è JobQueue
    app.job_queue.scheduler.configure(timezone=pytz_timezone('Europe/Moscow'))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test", test_connection))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    log.info("=== –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ===")
    app.run_polling()

if __name__ == "__main__":
    main()