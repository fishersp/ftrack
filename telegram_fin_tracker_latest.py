import logging
import os
import sys
from datetime import datetime
from io import BytesIO

import pandas as pd
import requests
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import configparser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s ‚Üí %(message)s",
    handlers=[
        logging.FileHandler("tracker.log", encoding="utf-8"),
        logging.StreamHandler(sys.stdout)
    ],
)
log = logging.getLogger("fin_tracker")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = configparser.ConfigParser()
config.read("config.ini", encoding="utf-8")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
ALLOWED_USERS = [int(x) for x in config["bot"].get("ALLOWED_USERS", "").split(",") if x.strip()]
N8N_GET_URL = config["n8n"].get("N8N_GET_URL", "")
N8N_WEBHOOK_URL = config["n8n"].get("N8N_WEBHOOK_URL", "")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def is_auth(user_id: int) -> bool:
    return user_id in ALLOWED_USERS

# –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤
def norm_cols(df: pd.DataFrame) -> pd.DataFrame:
    df.columns = df.columns.str.strip().str.lower()
    return df

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–∞ —Å Google Drive —á–µ—Ä–µ–∑ n8n
def get_drive_sheet(sheet_name: str) -> pd.DataFrame:
    log.info(f"–ó–∞–ø—Ä–æ—Å Excel-—Ñ–∞–π–ª–∞ —Å n8n: {N8N_GET_URL}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        resp = requests.get(N8N_GET_URL, timeout=30)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        log.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {resp.status_code}")
        log.info(f"Content-Type: {resp.headers.get('content-type')}")
        log.info(f"Content-Length: {resp.headers.get('content-length')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if resp.status_code != 200:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: —Å—Ç–∞—Ç—É—Å {resp.status_code}")
            log.error(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {resp.text[:200]}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: —Å—Ç–∞—Ç—É—Å {resp.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = resp.headers.get('content-type', '')
        if 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' not in content_type:
            log.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Content-Type –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Excel: {content_type}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        debug_file = "debug_response.bin"
        with open(debug_file, "wb") as f:
            f.write(resp.content)
        log.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(resp.content)} –±–∞–π—Ç –≤ {debug_file}")
        
        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞
        if len(resp.content) < 100:
            log.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü–æ–ª—É—á–µ–Ω –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª ({len(resp.content)} –±–∞–π—Ç)")
            log.warning(f"–ü–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç: {resp.content[:100]}")
            
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å Excel-—Ñ–∞–π–ª
        try:
            excel_data = BytesIO(resp.content)
            df = pd.read_excel(excel_data, sheet_name=sheet_name, engine="openpyxl")
            log.info(f"Excel-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω, –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç '{sheet_name}' —Å {len(df)} —Å—Ç—Ä–æ–∫–∞–º–∏")
            return df
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞: {str(e)}")
            raise
            
    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        raise

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ n8n –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel
def upload_to_n8n(file_content: BytesIO, file_name: str, meta: dict | None = None):
    if not N8N_WEBHOOK_URL:
        log.warning("N8N_WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return
        
    try:
        log.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ n8n: {N8N_WEBHOOK_URL}")
        log.info(f"–ú–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ: {meta}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        files = {"file": (file_name, file_content, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")}
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        resp = requests.post(N8N_WEBHOOK_URL, files=files, data=meta or {}, stream=True, timeout=30)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        log.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {resp.status_code}")
        log.info(f"Content-Type: {resp.headers.get('content-type')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if resp.status_code != 200:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: —Å—Ç–∞—Ç—É—Å {resp.status_code}")
            log.error(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {resp.text[:200]}")
            return False
            
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON-–æ—Ç–≤–µ—Ç
        try:
            resp_json = resp.json()
            log.info(f"–û—Ç–≤–µ—Ç JSON: {resp_json}")
        except:
            log.info(f"–û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç: {resp.text[:200]}")
            
        return True
    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ n8n: {str(e)}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç!\n–û—Ç–ø—Ä–∞–≤—å —Ä–∞—Å—Ö–æ–¥: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test
async def test_connection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        
    await update.message.reply_text("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ n8n...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º GET-–∑–∞–ø—Ä–æ—Å
        resp = requests.get(N8N_GET_URL, timeout=10)
        get_status = f"‚úÖ GET: {resp.status_code}, Content-Type: {resp.headers.get('content-type')}, Size: {len(resp.content)} bytes"
    except Exception as e:
        get_status = f"‚ùå GET: –û—à–∏–±–∫–∞ - {str(e)}"
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º POST-–∑–∞–ø—Ä–æ—Å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        test_data = {"test": "true", "timestamp": str(datetime.now())}
        resp = requests.post(N8N_WEBHOOK_URL, data=test_data, timeout=10)
        post_status = f"‚úÖ POST: {resp.status_code}, Response: {resp.text[:50]}..."
    except Exception as e:
        post_status = f"‚ùå POST: –û—à–∏–±–∫–∞ - {str(e)}"
    
    await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n{get_status}\n\n{post_status}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    text = update.message.text.strip()
    parts = [p.strip() for p in text.split(",")]
    if len(parts) < 2:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

    category, amount, *comment = parts
    try:
        amount = float(amount.replace("‚ÇΩ", "").replace(" ", ""))
    except ValueError:
        return await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    comment = comment[0] if comment else ""
    date_str = datetime.now().date()

    await update.message.reply_text(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {category}, {amount:.0f}‚ÇΩ{', ' + comment if comment else ''}...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π Excel-—Ñ–∞–π–ª
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞ —Å Google Drive...")
        df_trk = norm_cols(get_drive_sheet("–¢—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤"))
        log.info(f"–ü–æ–ª—É—á–µ–Ω Excel-—Ñ–∞–π–ª —Å {len(df_trk)} —Å—Ç—Ä–æ–∫–∞–º–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        new_row = {"–¥–∞—Ç–∞": date_str, "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": category, "—Å—É–º–º–∞ (‚ÇΩ)": amount, "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment, "—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∞–Ω–∞–ª–∏–∑–µ?": "–¥–∞"}
        df_trk = pd.concat([df_trk, pd.DataFrame([new_row])], ignore_index=True)
        log.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, —Ç–µ–ø–µ—Ä—å {len(df_trk)} —Å—Ç—Ä–æ–∫")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ BytesIO
        output = BytesIO()
        df_trk.to_excel(output, sheet_name="–¢—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤", index=False, engine="openpyxl")
        output.seek(0) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Ç–æ–∫–∞
        log.info(f"Excel-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ BytesIO, —Ä–∞–∑–º–µ—Ä: {output.getbuffer().nbytes} –±–∞–π—Ç")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º BytesIO –≤ n8n —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
            meta_data = {"–¥–∞—Ç–∞": str(date_str), "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": category, "—Å—É–º–º–∞": f"{amount:.0f}", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment}
            upload_success = upload_to_n8n(output, "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π_–ø–ª–∞–Ω_–∏—Ç–æ–≥–æ–≤–∞—è_—Å–≤–æ–¥–∫–∞_2.xlsx", meta_data)
            
            if not upload_success:
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ n8n")
                return await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        except Exception as e:
            log.exception(f"–û—à–∏–±–∫–∞ upload_to_n8n: {str(e)}")
            return await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
    except Exception as e:
        log.exception(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")

    log.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {category}, {amount:.2f}, {comment}")
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {category}, {amount:.0f}‚ÇΩ{', ' + comment if comment else ''}")

def main():
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    app = ApplicationBuilder().token(config["bot"]["TOKEN"]).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test", test_connection))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    log.info("=== –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ===")
    app.run_polling()

if __name__ == "__main__":
    main()
