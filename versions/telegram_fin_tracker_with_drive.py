import logging
import os
from datetime import datetime

import pandas as pd
import requests
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import configparser

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ------------------------------------------------
logging.basicConfig(
    filename="tracker.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s ‚Üí %(message)s",
    encoding="utf-8",
)
log = logging.getLogger("fin_tracker")

# ---   –ö–æ–Ω—Ñ–∏–≥ -----------------------------------------------------
config = configparser.ConfigParser()
config.read("config.ini", encoding="utf-8")

EXCEL_PATH = config["bot"].get(
    "EXCEL_PATH", "C:\\Docs\\OmenDocs\\MyFinance\\–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π_–ø–ª–∞–Ω_–∏_–¥–æ–ª–≥–∏ (8).xlsx"
)
PIPEDREAM_URL = config["bot"].get("PIPEDREAM_URL", "https://your-workflow-url.m.pipedream.net")

ALLOWED_USERS = [
    int(x) for x in config["bot"].get("ALLOWED_USERS", "").split(",") if x.strip()
]

# --- –£—Ç–∏–ª–∏—Ç—ã ----------------------------------------------------

def is_auth(user_id: int) -> bool:
    return user_id in ALLOWED_USERS

def norm_cols(df: pd.DataFrame) -> pd.DataFrame:
    df.columns = df.columns.str.strip().str.lower()
    return df

def send_plain_table(update: Update, header: str, lines: list[str]):
    table = "\n".join([header, "-" * len(header), *lines])
    return update.message.reply_text(f"<pre>{table}</pre>", parse_mode="HTML")

def upload_to_pipedream(file_path: str):
    if not os.path.exists(file_path):
        log.warning("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏: %s", file_path)
        return
    url = PIPEDREAM_URL
    try:
        with open(file_path, "rb") as f:
            files = {
                "file": (
                    os.path.basename(file_path),
                    f,
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            }
            response = requests.post(url, files=files)
        if response.status_code == 200:
            log.info("üì§ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Pipedream.")
        else:
            log.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Pipedream: %s | %s", response.status_code, response.text)
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ Pipedream")

# --- /start -----------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n\n–û—Ç–ø—Ä–∞–≤—å —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
    )

# --- handle_message ---------------------------------------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    text = update.message.text.strip()
    parts = [p.strip() for p in text.split(",")]
    if len(parts) < 2:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

    category, amount, *comment = parts
    try:
        amount = float(amount.replace("‚ÇΩ", "").replace(" ", ""))
    except ValueError:
        return await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    comment = comment[0] if comment else ""

    try:
        df_trk = norm_cols(pd.read_excel(EXCEL_PATH, sheet_name="–¢—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤"))
        new_row = {
            "–¥–∞—Ç–∞": datetime.now().date(),
            "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": category,
            "—Å—É–º–º–∞ (‚ÇΩ)": amount,
            "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment,
            "—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∞–Ω–∞–ª–∏–∑–µ?": "–¥–∞",
        }
        df_trk = pd.concat([df_trk, pd.DataFrame([new_row])], ignore_index=True)
        with pd.ExcelWriter(
            EXCEL_PATH, engine="openpyxl", mode="a", if_sheet_exists="replace"
        ) as w:
            df_trk.to_excel(w, sheet_name="–¢—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤", index=False)
        upload_to_pipedream(EXCEL_PATH)
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Excel")
        return await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Excel‚Äë—Ñ–∞–π–ª."
        )

    log.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: %s, %.2f, %s", category, amount, comment)
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {category}, {amount:.0f}‚ÇΩ{', '+comment if comment else ''}"
    )

# --- main -------------------------------------------------------
def main():
    app = ApplicationBuilder().token(config["bot"]["TOKEN"]).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    log.info("=== –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ===")
    app.run_polling()

if __name__ == "__main__":
    main()
