# telegram_fin_tracker.py ‚Äì¬†ü™ô –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –≤ Telegram
# ---------------------------------------------------------------
# –ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ (2025‚Äë06‚Äë05)
# 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω NameError –≤ /categories (df ‚Üí df_exp)
# 2. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ Excel (strip + lower) ‚Äì –º–µ–Ω—å—à–µ –æ—à–∏–±–æ–∫
# 3. –¢–∞–±–ª–∏—Ü—ã –≤—ã–≤–æ–¥—è—Ç—Å—è —Ä–æ–≤–Ω–æ: –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (---) –º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –¥–∞–Ω–Ω—ã–º–∏.
# 4. /month_plan –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ò–¢–û–ì–û.
# 5. /accounts ‚Äì –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–æ–∫ ¬´–ë–∞–Ω–∫¬ª, ¬´–¢–∏–ø¬ª, ¬´–û—Å—Ç–∞—Ç–æ–∫¬ª (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ);
#    –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äì¬†—á–∏—Ç–∞–±–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
# 6. –ë–æ–ª—å—à–µ –ª–æ–≥–æ–≤¬†–∏ try/except¬†‚Üí –ø—Ä–æ—â–µ –æ—Ç–ª–∞–¥–∫–∞.
# ---------------------------------------------------------------

import logging
import os
from datetime import datetime

import pandas as pd
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import configparser

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ------------------------------------------------
logging.basicConfig(
    filename="tracker.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s ‚Üí %(message)s",
    encoding="utf-8",
)
log = logging.getLogger("fin_tracker")

# ---   –ö–æ–Ω—Ñ–∏–≥ -----------------------------------------------------
config = configparser.ConfigParser()
config.read("config.ini", encoding="utf-8")

EXCEL_PATH = config["bot"].get(
    "EXCEL_PATH", "C:\\Docs\\OmenDocs\\MyFinance\\–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π_–ø–ª–∞–Ω_–∏_–¥–æ–ª–≥–∏ (8).xlsx"
)
if not os.path.exists(EXCEL_PATH):
    raise FileNotFoundError(f"Excel‚Äë—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {EXCEL_PATH}")

ALLOWED_USERS = [
    int(x) for x in config["bot"].get("ALLOWED_USERS", "").split(",") if x.strip()
]

# --- –£—Ç–∏–ª–∏—Ç—ã ----------------------------------------------------


def is_auth(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ."""
    return user_id in ALLOWED_USERS


def norm_cols(df: pd.DataFrame) -> pd.DataFrame:
    """–£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ–ª–∞–µ–º lower —É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤."""
    df.columns = df.columns.str.strip().str.lower()
    return df


def send_plain_table(update: Update, header: str, lines: list[str]):
    """–£–¥–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ <pre>."""
    table = "\n".join([header, "-" * len(header), *lines])
    return update.message.reply_text(f"<pre>{table}</pre>", parse_mode="HTML")


# --- /start -----------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n\n–û—Ç–ø—Ä–∞–≤—å —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n"
        "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "  /categories ‚Äì –±–∞–ª–∞–Ω—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ —Ç–µ–∫—É—â–∏–π —Ä–∞—Å—á. –º–µ—Å—è—Ü\n"
        "  /month_plan ‚Äì –ø–ª–∞–Ω —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –º–µ—Å—è—Ü\n"
        "  /accounts ‚Äì –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å—á–µ—Ç–∞–º"
    )


# --- /categories -----------------------------------------------
async def categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    try:
        df_exp = norm_cols(pd.read_excel(EXCEL_PATH, sheet_name="–†–∞—Å—Ö–æ–¥—ã"))
        df_trk = norm_cols(
            pd.read_excel(
                EXCEL_PATH, sheet_name="–¢—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤", parse_dates=["–î–∞—Ç–∞"]
            )
        )
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel")
        return await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Excel‚Äë—Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∏ –ª–∏—Å—Ç—ã."
        )

    today = datetime.now()
    start_date = datetime(today.year, today.month, 4)
    if today.day < 4:
        # —Å–¥–≤–∏–≥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        start_date = datetime(today.year, today.month - 1, 4)
    next_month = start_date.replace(day=28) + pd.Timedelta(days=4)  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
    end_date = next_month.replace(day=4)

    df_period = df_trk[
        (df_trk["–¥–∞—Ç–∞"] >= start_date)
        & (df_trk["–¥–∞—Ç–∞"] < end_date)
        & (df_trk["—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∞–Ω–∞–ª–∏–∑–µ?"] == "–¥–∞")
    ]

    header = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è               | –õ–∏–º–∏—Ç | –ü–æ—Ç—Ä–∞—á–µ–Ω–æ | –û—Å—Ç–∞—Ç–æ–∫"
    lines: list[str] = []
    total_limit = total_spent = 0.0

    for _, row in df_exp.iterrows():
        cat = str(row.get("–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "")).strip()
        if cat.lower() == "–∏—Ç–æ–≥–æ" or not cat:
            continue
        limit = float(row.get("–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –≤ –º–µ—Å—è—Ü (‚ÇΩ)", 0) or 0)
        spent = float(df_period[df_period["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] == cat]["—Å—É–º–º–∞ (‚ÇΩ)"].sum())
        remain = limit - spent
        total_limit += limit
        total_spent += spent
        lines.append(f"{cat[:22]:<22} | {limit:6.0f} | {spent:9.0f} | {remain:7.0f}")

    lines.extend(
        (
            "".ljust(len(header), "-"),
            f"–ò–¢–û–ì–û                   | {total_limit:6.0f} | {total_spent:9.0f} | {total_limit - total_spent:7.0f}",
        )
    )
    await send_plain_table(update, header, lines)


# --- /month_plan -----------------------------------------------
async def month_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    try:
        df_exp = norm_cols(pd.read_excel(EXCEL_PATH, sheet_name="–†–∞—Å—Ö–æ–¥—ã"))
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel (month_plan)")
        return await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Excel‚Äë—Ñ–∞–π–ª.")

    header = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è               | –ü–ª–∞–Ω, ‚ÇΩ | –û–±—è–∑–∞—Ç.?"
    lines: list[str] = []
    total_sum = 0.0

    for _, row in df_exp.iterrows():
        cat = str(row.get("–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "")).strip()
        if cat.lower() == "–∏—Ç–æ–≥–æ" or not cat:
            continue
        amount = float(row.get("–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –≤ –º–µ—Å—è—Ü (‚ÇΩ)", 0) or 0)
        total_sum += amount
        required = str(row.get("–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥?", "")).strip()
        lines.append(f"{cat[:22]:<22} | {amount:7.0f} | {required:<8}")

    lines.extend(
        (
            "".ljust(len(header), "-"),
            f"–ò–¢–û–ì–û                   | {total_sum:7.0f} |        ",
        )
    )
    await send_plain_table(update, header, lines)


# --- /accounts --------------------------------------------------
async def accounts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    try:
        df_acc = norm_cols(pd.read_excel(EXCEL_PATH, sheet_name="–û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å—á–µ—Ç–∞–º"))
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel (accounts)")
        return await update.message.reply_text(
            '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–∏—Å—Ç "–û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å—á–µ—Ç–∞–º".'
        )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã ‚Äì –∏—â–µ–º –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–æ–¥—Å—Ç—Ä–æ–∫–∞–º
    cols = {c: idx for idx, c in enumerate(df_acc.columns)}
    bank_col = next((c for c in cols if "–±–∞–Ω–∫" in c), None)
    type_col = next((c for c in cols if "—Ç–∏–ø" in c), None)
    balance_col = next((c for c in cols if "–æ—Å—Ç–∞—Ç–æ–∫" in c), None)
    if not all([bank_col, type_col, balance_col]):
        return await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–æ–ª–±—Ü—ã –ë–∞–Ω–∫ / –¢–∏–ø / –û—Å—Ç–∞—Ç–æ–∫ –≤ Excel‚Äë—Ñ–∞–π–ª–µ."
        )

    header = "–ë–∞–Ω–∫              | –¢–∏–ø            | –û—Å—Ç–∞—Ç–æ–∫, ‚ÇΩ"
    lines: list[str] = []
    total_bal = 0.0
    for _, row in df_acc.iterrows():
        bank = str(row[bank_col]).strip()
        acc_type = str(row[type_col]).strip()
        bal = float(row[balance_col] or 0)
        total_bal += bal
        lines.append(f"{bank[:16]:<16} | {acc_type[:12]:<12} | {bal:10.2f}")

    lines.extend(
        (
            "".ljust(len(header), "-"),
            f"–ò–¢–û–ì–û             |                | {total_bal:10.2f}",
        )
    )
    await send_plain_table(update, header, lines)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è --------------------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    text = update.message.text.strip()
    parts = [p.strip() for p in text.split(",")]
    if len(parts) < 2:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

    category, amount, *comment = parts
    try:
        amount = float(amount.replace("‚ÇΩ", "").replace(" ", ""))
    except ValueError:
        return await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    comment = comment[0] if comment else ""

    try:
        df_trk = norm_cols(pd.read_excel(EXCEL_PATH, sheet_name="–¢—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤"))
        new_row = {
            "–¥–∞—Ç–∞": datetime.now().date(),
            "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": category,
            "—Å—É–º–º–∞ (‚ÇΩ)": amount,
            "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment,
            "—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∞–Ω–∞–ª–∏–∑–µ?": "–¥–∞",
        }
        df_trk = pd.concat([df_trk, pd.DataFrame([new_row])], ignore_index=True)
        with pd.ExcelWriter(
            EXCEL_PATH, engine="openpyxl", mode="a", if_sheet_exists="replace"
        ) as w:
            df_trk.to_excel(w, sheet_name="–¢—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤", index=False)
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Excel")
        return await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Excel‚Äë—Ñ–∞–π–ª."
        )

    log.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: %s, %.2f, %s", category, amount, comment)
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {category}, {amount:.0f}‚ÇΩ{', '+comment if comment else ''}"
    )


# --- main -------------------------------------------------------


def main():
    app = ApplicationBuilder().token(config["bot"]["TOKEN"]).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("categories", categories))
    app.add_handler(CommandHandler("month_plan", month_plan))
    app.add_handler(CommandHandler("accounts", accounts))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    log.info("=== –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ===")
    app.run_polling()


if __name__ == "__main__":
    main()
