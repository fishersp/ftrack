import logging
import os
from datetime import datetime

import pandas as pd
import requests
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---------------------------------------------------------
TOKEN = "7575422774:AAFMZyuxHZ1ArYPE-j2rf94BIC2nBuyVPqk"
ALLOWED_USERS = [272327626]  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram user ID
EXCEL_PATH = "C:\\Docs\\tbot\\fin_track\\–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π_–ø–ª–∞–Ω_–∏_–¥–æ–ª–≥–∏ (9).xlsx"
N8N_WEBHOOK_URL = (
    "https://n8n-fintrack-dreamfish.amvera.io/webhook-test/upload-fin-file"
)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------------------------------------------------
logging.basicConfig(
    filename="mini_tracker.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    encoding="utf-8",
)
log = logging.getLogger("mini_tracker")

# --- –£—Ç–∏–ª–∏—Ç—ã --------------------------------------------------------------


def is_auth(user_id: int) -> bool:
    return user_id in ALLOWED_USERS


def norm_cols(df: pd.DataFrame) -> pd.DataFrame:
    df.columns = df.columns.str.strip().str.lower()
    return df


def upload_to_n8n(file_path: str):
    if not os.path.exists(file_path):
        log.warning("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", file_path)
        return
    try:
        with open(file_path, "rb") as f:
            files = {
                "file": (
                    os.path.basename(file_path),
                    f,
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                )
            }
            response = requests.post(N8N_WEBHOOK_URL, files=files)
        if response.status_code == 200:
            log.info("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ n8n.")
        else:
            log.warning(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ n8n: %s | %s",
                response.status_code,
                response.text,
            )
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ n8n")


# --- –ë–æ—Ç ------------------------------------------------------------------


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await update.message.reply_text("–ì–æ—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    text = update.message.text.strip()
    parts = [p.strip() for p in text.split(",")]
    if len(parts) < 2:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

    category, amount, *comment = parts
    try:
        amount = float(amount.replace("‚ÇΩ", "").replace(" ", ""))
    except ValueError:
        return await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    comment = comment[0] if comment else ""
    try:
        if os.path.exists(EXCEL_PATH):
            df_trk = norm_cols(pd.read_excel(EXCEL_PATH, sheet_name="–¢—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤"))
        else:
            df_trk = pd.DataFrame(
                columns=[
                    "–¥–∞—Ç–∞",
                    "–∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                    "—Å—É–º–º–∞ (‚ÇΩ)",
                    "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    "—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∞–Ω–∞–ª–∏–∑–µ?",
                ]
            )

        new_row = {
            "–¥–∞—Ç–∞": datetime.now().date(),
            "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": category,
            "—Å—É–º–º–∞ (‚ÇΩ)": amount,
            "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment,
            "—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∞–Ω–∞–ª–∏–∑–µ?": "–¥–∞",
        }

        df_trk = pd.concat([df_trk, pd.DataFrame([new_row])], ignore_index=True)
        with pd.ExcelWriter(
            EXCEL_PATH, engine="openpyxl", mode="a", if_sheet_exists="replace"
        ) as writer:
            df_trk.to_excel(writer, sheet_name="–¢—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤", index=False)

        log.info("üßæ –†–∞—Å—Ö–æ–¥ –∑–∞–ø–∏—Å–∞–Ω: %s, %.2f, %s", category, amount, comment)
        upload_to_n8n(EXCEL_PATH)
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")
        return await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞.")

    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {category}, {amount:.0f}‚ÇΩ"
    )


def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()


if __name__ == "__main__":
    main()
