"""Telegram‚Äë–±–æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ (Google¬†Sheets)
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è¬†‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å APScheduler + pytz.
"""

import logging
import os
import sys
from datetime import datetime

import gspread
from google.oauth2.service_account import Credentials
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    JobQueue,
    filters,
)
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import configparser

# ---------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s ‚Üí %(message)s",
    handlers=[
        logging.FileHandler("tracker.log", encoding="utf-8"),
        logging.StreamHandler(sys.stdout),
    ],
)
log = logging.getLogger("fin_tracker")

# ---------------------- –ö–æ–Ω—Ñ–∏–≥ ---------------------------
BASE_DIR = os.path.dirname(__file__)
config = configparser.ConfigParser()
config.read(os.path.join(BASE_DIR, "config.ini"), encoding="utf-8")

ALLOWED_USERS = [
    int(x) for x in config["bot"].get("ALLOWED_USERS", "").split(",") if x.strip()
]
SPREADSHEET_ID = config["sheets"]["SPREADSHEET_ID"]
SHEET_NAME = config["sheets"].get("SHEET_NAME", "–¢—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤")

# ---------------- Google¬†Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è --------------
creds = Credentials.from_service_account_file(
    os.path.join(BASE_DIR, "service_account.json"),
    scopes=["https://www.googleapis.com/auth/spreadsheets"],
)
gc = gspread.authorize(creds)
sheet = gc.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)

# -------------------- –£—Ç–∏–ª–∏—Ç—ã ----------------------------
def is_auth(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à—ë–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    return user_id in ALLOWED_USERS


# ------------------- Handlers ----------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ä–∞—Å—Ö–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
        "<–∫–∞—Ç–µ–≥–æ—Ä–∏—è>, <—Å—É–º–º–∞>, <–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π>"
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_auth(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    text = (update.message.text or "").strip()
    parts = [p.strip() for p in text.split(",")]
    if len(parts) < 2:
        return await update.message.reply_text(
            "–§–æ—Ä–º–∞—Ç: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        )

    category, amount, *comment = parts
    # —á–∏—Å–ª–æ
    try:
        amount = float(amount.replace("‚ÇΩ", "").replace(" ", "").replace(",", "."))
    except ValueError:
        return await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    comment = comment[0] if comment else ""
    date_str = datetime.now().strftime("%Y-%m-%d")

    await update.message.reply_text(
        f"üîÑ –°–æ—Ö—Ä–∞–Ω—è—é: {category}, {amount:.0f}‚ÇΩ{f', {comment}' if comment else ''}‚Ä¶"
    )
    try:
        sheet.append_row([date_str, category, amount, comment, "–¥–∞"])
        log.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: %s, %.2f, %s", category, amount, comment)
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {category}, {amount:.0f}‚ÇΩ{f', {comment}' if comment else ''}"
        )
    except Exception as exc:
        log.exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google¬†Sheets")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {exc}")


# ------------------- MAIN --------------------------------
def main():
    # pytz‚Äë—Ç–∞–π–º–∑–æ–Ω–∞ –¥–ª—è –ú–æ—Å–∫–≤—ã
    moscow_tz = pytz.timezone("Europe/Moscow")

    # –°–æ–∑–¥–∞—ë–º —Å–≤–æ–π AsyncIOScheduler, –≥–¥–µ —è–≤–Ω–æ –∑–∞–¥–∞—ë–º timezone ‚Üí pytz
    scheduler = AsyncIOScheduler(timezone=moscow_tz)
    job_queue = JobQueue(scheduler=scheduler)

    # Application
    app = (
        ApplicationBuilder()
        .token(config["bot"]["TOKEN"])
        .job_queue(job_queue)
        .build()
    )

    # –•—ç–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    log.info("=== –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω ===")
    app.run_polling()


if __name__ == "__main__":
    main()